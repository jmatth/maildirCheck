#!/usr/bin/env python
import os
import sys
import glob
import re
import shutil
import fileinput
from optparse import OptionParser


def main():
    """ Best wrapper function """
    (options, maildir) = checkArgs()

    if options.recursive:
        checkMaildirFolders(maildir, options.quiet, options.fix)

    else:
        checkMailSize(maildir, options.quiet, options.fix)


def checkArgs():
    """ Check the command line options with optparse """
    parser = OptionParser(usage='%prog [options] path_to_maildir')

    parser.add_option('-f', '--fix', dest='fix', default=False,
                      action='store_true', help='Execute the calculated mv'
                      ' commands and fix the uid file.')

    parser.add_option('-q', '--quiet', dest='quiet', default=False,
                      action='store_true', help='Don\'t display any output.')

    parser.add_option('-r', '--recursive', dest='recursive', default=False,
                      action='store_true', help='Recursively process all extra'
                      ' folders in the given maildir.')

    (options, args) = parser.parse_args()

    # We only want the path as an argument.
    if len(args) > 1:
        parser.error('Too many arguments')

    # We actually need the path as an argument.
    if len(args) < 1:
        parser.error('Please provide a path to the maildir')

    # Technically not wrong, but a stupid combination of options
    if options.quiet and not options.fix:
        parser.error('Specifying -q without -f effectively does noting so' +
                     ' I\'ll just exit here')

    # Grab the maildir path
    maildir = args[0]

    # Make sure the directory has a trailing slash.
    if not maildir[len(maildir)-1] == '/':
        maildir = maildir + '/'

    return (options, maildir)


def checkMaildirFolders(dirpath, quiet=False, fix=False):
    """ Recursively check nested maildirs. """

    # Nested folders should be prefixed with a dot.
    subdirs = glob.glob(dirpath + '.*')

    for subdir in subdirs:
        # Sanity checks. Make sure we are working with an actual directory and
        # it has the appropriate maildir stuff in it.
        if (os.path.isdir(subdir) and
                os.path.isfile(subdir + '/maildirfolder')):
            # Recursive call.
            checkMaildirFolders(subdir + '/', quiet, fix)

    # Check the current maildir after recursing.
    checkMailSize(dirpath, quiet, fix)


def checkMailSize(dirpath, quiet=False, fix=False):
    """ Checks the integrity of cur/, new/, and tmp/ in the maildir 'dirpath' """

    # Per Richton's testing of live Maildirs,
    # we have to be pretty loose versus the spec.
    mailRegex = re.compile('[0-9]{10}\..*S=[0-9]+')

    for subdir in [dirpath + x for x in ['cur/', 'new/', 'tmp/']]:
        # List files in directory.
        for mail in os.listdir(subdir):
            # Verify the current file matches the maildir spec.
            if mailRegex.match(mail):
                # Grab the size from the filename.
                reported_size = re.search('[0-9]+',
                                          re.search('S=[0-9]+', mail).group()
                                          ).group()
                # Stat the file to get the actual size.
                actual_size = str(os.stat(subdir + mail).st_size)

                # Does the file name have the correct size?
                if not reported_size == actual_size:
                    # Print the mv command needed to fix the filename
                    if not quiet:
                        print ('mv ' + subdir + mail + ' ' + subdir +
                               mail.replace("S=" + reported_size, "S=" +
                               actual_size))
                    # Fix the filename if we were asked to.
                    if fix:
                        # Used to fix the uidlist file.
                        uidLineOld = mail.rsplit(':', 1)[0]
                        uidLineNew = uidLineOld.replace("S=" + reported_size,
                                                        "S=" + actual_size)

                        # Move the file to fixed location.
                        shutil.move(subdir + mail, subdir +
                                    mail.replace("S=" + reported_size,
                                                 "S=" + actual_size))

                        # Rewrite the uidlist file, replacing the line for the
                        # file we just moved with the updated one.
                        # FIXME: is there a way to change just the one line
                        # without rewriting the whole file? Google seems to
                        # think not.
                        for line in fileinput.input(
                                dirpath + 'dovecot-uidlist', inplace=1):
                            # fileinput redirects stdout to the file, so this
                            # is actually writing each line. line.replace
                            # replaces the old line when it's found, otherwise
                            # just returns the original.
                            sys.stdout.write(line.replace(uidLineOld,
                                                          uidLineNew))

# The python way to start main.
if __name__ == "__main__":
    main()
